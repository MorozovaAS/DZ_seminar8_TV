import numpy
import scipy
import pandas

#1) Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
#zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
#ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
#Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
#Полученные значения должны быть равны.
#Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков, а затем с использованием функций из библиотек numpy и pandas.
print("Задача 1")
print()
zp = numpy.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = numpy.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
zp1 = pandas.Series([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks2 = pandas.Series([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

print((numpy.mean(zp*ks)-numpy.mean(zp)*numpy.mean(ks))/(numpy.std(zp)*numpy.std(ks)))

print(10175.37777778/(numpy.std(zp, ddof=1)*numpy.std(ks, ddof=1)), "несмещенная корреляция")
print(9157.84/(numpy.std(zp, ddof=0)*numpy.std(ks, ddof=0)), "смещенная корреляция")
print(numpy.corrcoef(zp, ks))
print(zp1.corr(ks2))


#2) Измерены значения IQ выборки студентов,
#обучающихся в местных технических вузах:
#131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
#Известно, что в генеральной совокупности IQ распределен нормально.
#Найдите доверительный интервал для математического ожидания с надежностью 0.95.
print()
print("Задача 2")
print()

array = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
n = 10
std = numpy.std(array, ddof=1)
mean = numpy.mean(array)
t = scipy.stats.t.ppf(0.975,9)
print("[",mean-t*(std/(n**0.5)),";",mean+t*(std/(n**0.5)),"]",)

#3) Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности,
# равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.
print()
print("Задача 3")
print()

sigma = 25**0.5
M = 174.2
n = 27
z = scipy.stats.norm.ppf(0.975)
print("[",M-z*(sigma/(n**0.5)),";",M+z*(sigma/(n**0.5)),"]",)